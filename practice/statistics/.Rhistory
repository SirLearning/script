rho = 0.75; mu = c(0, 0); sig1 = sig2 = 1
Sigma = matrix(c(sig1^2, rho*sig1*sig2, rho*sig1*sig2, sig2^2), nrow = 2)
X = seq(-3, 3, length = 41); Y = X
f = function(X, Y) {
XY = cbind(X, Y)
dmvnorm(XY, mu, Sigma)
}
Z = outer(X, Y, f)
persp(X, Y, Z, col = "lightgreen",
theta = 30, phi = 20, r = 50, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.75, ticktype = "detailed", nticks = 5,
xlab = "X", ylab = "Y", zlab = "f(x,y)")
win.graph()
image(X, Y, Z)
contour(X, Y, Z, add = TRUE)
# 3D plot
persp3d(X, Y, Z, theta = 45, phi = 25, col = "red")
M = par3d("userMatrix"); bg3d("white")
play3d(par3dinterp(userMatrix = list(M, rotate3d(M, angle = pi,
x = 1, y = 0, z = 0))),
duration = 10)
persp3d(X, Y, Z, theta = 45, phi = 25, col = "red")
M = par3d("userMatrix"); bg3d("white")
play3d(par3dinterp(userMatrix = list(M, rotate3d(M, angle = pi,
x = 1, y = 0, z = 0))),
duration = 10)
rho = 0.75; mu = c(0, 0); sig1 = sig2 = 1
Sigma = matrix(c(sig1^2, rho*sig1*sig2, rho*sig1*sig2, sig2^2), nrow = 2)
X = seq(-3, 3, length = 41); Y = X
f = function(X, Y) {
XY = cbind(X, Y)
dmvnorm(XY, mu, Sigma)
}
Z = outer(X, Y, f)
persp(X, Y, Z, col = "lightgreen",
theta = 30, phi = 20, r = 50, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.75, ticktype = "detailed", nticks = 5,
xlab = "X", ylab = "Y", zlab = "f(x,y)")
win.graph()
image(X, Y, Z)
contour(X, Y, Z, add = TRUE)
par(mfrow = c(2, 3))
for (i in c(-0.75, 0, 0.75)) {
rho = i; mu = c(0, 0); sig1 = sig2 = 1
Sigma = matrix(c(sig1^2, rho*sig1*sig2, rho*sig1*sig2, sig2^2), nrow = 2)
X = seq(-3, 3, length = 41); Y = X
f = function(X, Y) {
XY = cbind(X, Y)
dmvnorm(XY, mu, Sigma)
}
Z = outer(X, Y, f)
persp(X, Y, Z, col = "lightgreen",
theta = 30, phi = 20, r = 50, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.75, ticktype = "detailed", nticks = 5,
xlab = "X", ylab = "Y", zlab = "f(x,y)")
win.graph()
image(X, Y, Z)
contour(X, Y, Z, add = TRUE)
}
image(X, Y, Z)
contour(X, Y, Z, add = TRUE)
par(mfrow = c(2, 3))
for (i in c(-0.75, 0, 0.75)) {
rho = i; mu = c(0, 0); sig1 = sig2 = 1
Sigma = matrix(c(sig1^2, rho*sig1*sig2, rho*sig1*sig2, sig2^2), nrow = 2)
X = seq(-3, 3, length = 41); Y = X
f = function(X, Y) {
XY = cbind(X, Y)
dmvnorm(XY, mu, Sigma)
}
Z = outer(X, Y, f)
persp(X, Y, Z, col = "lightgreen",
theta = 30, phi = 20, r = 50, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.75, ticktype = "detailed", nticks = 5,
xlab = "X", ylab = "Y", zlab = "f(x,y)")
# win.graph()
image(X, Y, Z)
contour(X, Y, Z, add = TRUE)
}
par(mfrow = c(3, 2))
for (i in c(-0.75, 0, 0.75)) {
rho = i; mu = c(0, 0); sig1 = sig2 = 1
Sigma = matrix(c(sig1^2, rho*sig1*sig2, rho*sig1*sig2, sig2^2), nrow = 2)
X = seq(-3, 3, length = 41); Y = X
f = function(X, Y) {
XY = cbind(X, Y)
dmvnorm(XY, mu, Sigma)
}
Z = outer(X, Y, f)
persp(X, Y, Z, col = "lightgreen",
theta = 30, phi = 20, r = 50, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.75, ticktype = "detailed", nticks = 5,
xlab = "X", ylab = "Y", zlab = "f(x,y)")
# win.graph()
image(X, Y, Z)
contour(X, Y, Z, add = TRUE)
}
install.packages("car")
set.seed(1); n = 1000
mu = c(0, 2); Sig = matrix(c(1, 0.7, 0.7, 1), 2, 2)
# method 1
biv1 = mvrnorm(n, mu, Sig); colnames(biv1) = c("X", "Y")
library(MASS); library(car)
set.seed(1); n = 1000
mu = c(0, 2); Sig = matrix(c(1, 0.7, 0.7, 1), 2, 2)
# method 1
biv1 = mvrnorm(n, mu, Sig); colnames(biv1) = c("X", "Y")
# method 2
sig.eigen = eigen(Sig)
Sigma = sig.eigen$vec%*%diag(sqrt(sig.eigen$val))%*%t(sig.eigen$vec)
biv2 = mu + t(matrix(rnorm(2*n), ncol = 2)%*%Sigma)
biv2 = t(biv2); colnames(biv2) = c("X", "Y")
# plot
par(mfrow = c(1, 2))
dataEllipse(biv1[, 1], biv1[, 2], levels = 0.95)
points(t(mu), col = "red", pch = 8)
dataEllipse(biv2[, 1], biv2[, 2], levels = 0.95)
points(t(mu), col = "red", pch = 8)
set.seed(1); n = 10000
mu = c(0, 2); Sig = matrix(c(1, 0.7, 0.7, 1), 2, 2)
# method 1
biv1 = mvrnorm(n, mu, Sig); colnames(biv1) = c("X", "Y")
# method 2
sig.eigen = eigen(Sig)
Sigma = sig.eigen$vec%*%diag(sqrt(sig.eigen$val))%*%t(sig.eigen$vec)
biv2 = mu + t(matrix(rnorm(2*n), ncol = 2)%*%Sigma)
biv2 = t(biv2); colnames(biv2) = c("X", "Y")
# plot
par(mfrow = c(1, 2))
dataEllipse(biv1[, 1], biv1[, 2], levels = 0.95)
points(t(mu), col = "red", pch = 8)
dataEllipse(biv2[, 1], biv2[, 2], levels = 0.95)
points(t(mu), col = "red", pch = 8)
View(Watkins_phenotype)
View(Watkins_phenotype)
# related data (heading data & height)
attach(Watkins_phenotype)
related_data <- data.frame(country = `COUNTRY
of origin`,
HD = `Hd_dto_days-CFLN06`,
PH = `PH_M_cm-CFLN06`)
View(related_data)
View(related_data)
View(related_data)
View(related_data)
related_data <- related_data[!grepl("\\*", related_data$country) &
!grepl("\\*", related_data$HD) &
!grepl("\\*", related_data$PH), ]
related_data <- related_data[order(row.names(related_data)), ]
related_data <- related_data %>% mutate(HD = as.numeric(HD))
related_data <- related_data %>% mutate(PH = as.numeric(PH))
related_data <- na.omit(related_data)
View(related_data)
related_data <- related_data[!is.na(related_data$country)]
related_data <- related_data[!is.na(related_data$country)]
View(related_data)
View(related_data)
# related data (heading data & height)
attach(Watkins_phenotype)
related_data <- data.frame(country = `COUNTRY
of origin`,
HD = `Hd_dto_days-CFLN06`,
PH = `PH_M_cm-CFLN06`)
related_data <- related_data[!grepl("\\*", related_data$country) &
!grepl("\\*", related_data$HD) &
!grepl("\\*", related_data$PH), ]
related_data <- na.omit(related_data)
related_data <- related_data %>% mutate(HD = as.numeric(HD))
library(readxl); library(dplyr)
related_data <- related_data %>% mutate(HD = as.numeric(HD))
related_data <- related_data %>% mutate(PH = as.numeric(PH))
related_data <- related_data[order(row.names(related_data)), ]
related_data <- related_data %>% mutate(HD = as.numeric(HD)) %>% arrange(Rep1)
related_data <- related_data %>% mutate(HD = as.numeric(HD)) %>% arrange(HD)
related_data <- related_data %>% mutate(PH = as.numeric(PH))
related_data <- related_data[order(row.names(related_data)), ]
attach(Watkins_phenotype)
plant_height <- data.frame(country = `COUNTRY
of origin`,
Rep1 = `PH_M_cm-Rep1`,
Rep2 = `PH_M_cm-Rep2`,
Rep3 = `PH_M_cm-Rep3`,
Rep4 = `PH_M_cm-Rep4`)
plant_height <- plant_height[!grepl("\\*", plant_height$Rep1) &
!grepl("\\*", plant_height$Rep2) &
!grepl("\\*", plant_height$Rep3) &
!grepl("\\*", plant_height$Rep4) &
!grepl("\\*", plant_height$country), ]
plant_height <- plant_height[order(row.names(plant_height)), ]
plant_height$Rep1 <- sapply(strsplit(as.character(plant_height$Rep1), "-"), `[`, 1)
plant_height$Rep2 <- sapply(strsplit(as.character(plant_height$Rep2), "-"), `[`, 1)
plant_height$Rep3 <- sapply(strsplit(as.character(plant_height$Rep3), "-"), `[`, 1)
plant_height$Rep4 <- sapply(strsplit(as.character(plant_height$Rep4), "-"), `[`, 1)
plant_height <- plant_height %>% mutate(Rep1 = as.numeric(Rep1)) %>% arrange(Rep1)
plant_height <- plant_height %>% mutate(Rep2 = as.numeric(Rep2))
plant_height <- plant_height %>% mutate(Rep3 = as.numeric(Rep3))
plant_height <- plant_height %>% mutate(Rep4 = as.numeric(Rep4))
plant_height <- plant_height[!is.na(plant_height$country), ]
plant_height <- na.omit(plant_height)
View(plant_height)
attach(Watkins_phenotype)
related_data <- data.frame(country = `COUNTRY
of origin`,
HD = `Hd_dto_days-CFLN06`,
PH = `PH_M_cm-CFLN06`)
related_data <- related_data[!grepl("\\*", related_data$country) &
!grepl("\\*", related_data$HD) &
!grepl("\\*", related_data$PH), ]
related_data <- na.omit(related_data)
related_data <- related_data %>% mutate(HD = as.numeric(HD)) %>% arrange(HD)
related_data <- related_data %>% mutate(PH = as.numeric(PH))
related_data <- related_data[order(row.names(related_data)), ]
View(related_data)
attach(Watkins_phenotype)
related_data <- data.frame(country = `COUNTRY
of origin`,
HD = `Hd_dto_days-CFLN06`,
PH = `PH_M_cm-CFLN06`)
related_data <- related_data[!grepl("\\*", related_data$country) &
!grepl("\\*", related_data$HD) &
!grepl("\\*", related_data$PH), ]
related_data <- na.omit(related_data)
related_data <- related_data %>% mutate(HD = as.numeric(HD))
related_data <- related_data %>% mutate(PH = as.numeric(PH))
related_data <- related_data[order(as.numeric(row.names(related_data))), ]
View(related_data)
attach(Watkins_phenotype)
related_data <- data.frame(country = `COUNTRY
of origin`,
HD = `Hd_dto_days-CFLN06`,
PH = `PH_M_cm-CFLN06`)
related_data <- related_data[!grepl("\\*", related_data$country) &
!grepl("\\*", related_data$HD) &
!grepl("\\*", related_data$PH), ]
related_data <- na.omit(related_data)
related_data <- related_data %>% mutate(HD = as.numeric(HD)) %>% arrange(HD)
related_data <- related_data %>% mutate(PH = as.numeric(PH))
related_data <- related_data[order(as.numeric(row.names(related_data))), ]
library(readxl); library(dplyr)
Watkins_phenotype <- read_excel("Watseq_phenotype_data/Watkins_Collection_WGIN_WISP_DFW_watseq_phenotype_data_JIC.xlsx",
sheet = "WGIN_Watkins_JIC_CFLN06")
library(readxl); library(dplyr)
Watkins_phenotype <- read_excel("Watseq_phenotype_data/Watkins_Collection_WGIN_WISP_DFW_watseq_phenotype_data_JIC.xlsx",
sheet = "WGIN_Watkins_JIC_CFLN06")
# height data
attach(Watkins_phenotype)
plant_height <- data.frame(country = `COUNTRY
of origin`,
Rep1 = `PH_M_cm-Rep1`,
Rep2 = `PH_M_cm-Rep2`,
Rep3 = `PH_M_cm-Rep3`,
Rep4 = `PH_M_cm-Rep4`)
plant_height <- plant_height[!grepl("\\*", plant_height$Rep1) &
!grepl("\\*", plant_height$Rep2) &
!grepl("\\*", plant_height$Rep3) &
!grepl("\\*", plant_height$Rep4) &
!grepl("\\*", plant_height$country), ]
plant_height <- plant_height[order(row.names(plant_height)), ]
plant_height$Rep1 <- sapply(strsplit(as.character(plant_height$Rep1), "-"), `[`, 1)
plant_height$Rep2 <- sapply(strsplit(as.character(plant_height$Rep2), "-"), `[`, 1)
plant_height$Rep3 <- sapply(strsplit(as.character(plant_height$Rep3), "-"), `[`, 1)
plant_height$Rep4 <- sapply(strsplit(as.character(plant_height$Rep4), "-"), `[`, 1)
plant_height <- plant_height %>% mutate(Rep1 = as.numeric(Rep1)) %>% arrange(Rep1)
plant_height <- plant_height %>% mutate(Rep2 = as.numeric(Rep2))
plant_height <- plant_height %>% mutate(Rep3 = as.numeric(Rep3))
plant_height <- plant_height %>% mutate(Rep4 = as.numeric(Rep4))
plant_height <- plant_height[!is.na(plant_height$country), ]
plant_height <- na.omit(plant_height)
# related data (heading data & height)
attach(Watkins_phenotype)
related_data <- data.frame(country = `COUNTRY
of origin`,
HD = `Hd_dto_days-CFLN06`,
PH = `PH_M_cm-CFLN06`)
related_data <- related_data[!grepl("\\*", related_data$country) &
!grepl("\\*", related_data$HD) &
!grepl("\\*", related_data$PH), ]
related_data <- na.omit(related_data)
related_data <- related_data %>% mutate(HD = as.numeric(HD)) %>% arrange(HD)
related_data <- related_data %>% mutate(PH = as.numeric(PH))
related_data <- related_data[order(as.numeric(row.names(related_data))), ]
View(related_data)
View(plant_height)
View(related_data)
bivariate_data <- related_data[, 2]
attach(related_data)
bivariate_data <- data.frame(HD = related_data$HD,
PH = related_data$PH)
View(bivariate_data)
confEllipse(bivariate_data, 0.95)
confEllipse = function(xdata, alpha) {
if (ncol(xdata) != 2) stop("Only for bivariate normal")
n = nrow(xdata); xbar = colMeans(xdata)
S = cov(xdata); es = eigen(S)
e1 = es$vec %*% diag(sqrt(es$val))
r1 = sqrt(qf(alpha, 2, n-2)*sqrt(2*(n-1)/(n*(n-2))))
theta = seq(0, 2*pi, len = 250)
v1 = cbind(r1*cos(theta), r1*sin(theta))
pts = t(xbar - (e1%*%t(v1)))
plot(pts, type = "l", col = "red", lwd = 3,
main = "Confidence Region for Bivariate Normal",
xlab = "X", ylab = "Y", asp = 1)
grid(lty = 1, equilogs = FALSE)
segments(-0.2, xbar[2], xbar[1], xbar[2], lty = 2, lwd = 2)
segments(xbar[1], 0, xbar[1], xbar[2], lty = 2, lwd = 2)
th2 = c(0, pi/2, pi, 3*pi/2, 2*pi)
v2 = cbind(r1*cos(th2), r1*sin(th2))
pts2 = t(xbar - (e1%*%t(v2)))
segments(pts2[3, 1], pts2[3, 2], pts2[1, 1], pts2[1, 2], lty = 4, lwd = 2)
segments(pts2[2, 1], pts2[2, 2], pts2[4, 1], pts2[4, 2], lty = 4, lwd = 2)
}
confEllipse(bivariate_data, 0.95)
xdata <- data.frame(HD = related_data$HD,
PH = related_data$PH)
alpha <- 0.95
if (ncol(xdata) != 2) stop("Only for bivariate normal")
n = nrow(xdata); xbar = colMeans(xdata)
S = cov(xdata); es = eigen(S)
e1 = es$vec %*% diag(sqrt(es$val))
r1 = sqrt(qf(alpha, 2, n-2)*sqrt(2*(n-1)/(n*(n-2))))
theta = seq(0, 2*pi, len = 250)
v1 = cbind(r1*cos(theta), r1*sin(theta))
pts = t(xbar - (e1%*%t(v1)))
plot(pts, type = "l", col = "red", lwd = 3,
main = "Confidence Region for Bivariate Normal",
xlab = "X", ylab = "Y", asp = 1)
grid(lty = 1, equilogs = FALSE)
segments(-0.2, xbar[2], xbar[1], xbar[2], lty = 2, lwd = 2)
segments(xbar[1], 0, xbar[1], xbar[2], lty = 2, lwd = 2)
th2 = c(0, pi/2, pi, 3*pi/2, 2*pi)
v2 = cbind(r1*cos(th2), r1*sin(th2))
pts2 = t(xbar - (e1%*%t(v2)))
segments(pts2[3, 1], pts2[3, 2], pts2[1, 1], pts2[1, 2], lty = 4, lwd = 2)
segments(pts2[2, 1], pts2[2, 2], pts2[4, 1], pts2[4, 2], lty = 4, lwd = 2)
xdata <- data.frame(HD = related_data$HD,
PH = related_data$PH)
alpha <- 0.95
if (ncol(xdata) != 2) stop("Only for bivariate normal")
n = nrow(xdata); xbar = colMeans(xdata)
S = cov(xdata); es = eigen(S)
View(S)
e1 = es$vec %*% diag(sqrt(es$val))
View(e1)
r1 = sqrt(qf(alpha, 2, n-2)*sqrt(2*(n-1)/(n*(n-2))))
theta = seq(0, 2*pi, len = 250)
theta = seq(0, 2*pi, len = 1000)
v1 = cbind(r1*cos(theta), r1*sin(theta))
View(v1)
pts = t(xbar - (e1%*%t(v1)))
View(pts)
plot(pts, type = "l", col = "red", lwd = 3,
main = "Confidence Region for Bivariate Normal",
xlab = "X", ylab = "Y", asp = 1)
grid(lty = 1, equilogs = FALSE)
segments(-0.2, xbar[2], xbar[1], xbar[2], lty = 2, lwd = 2)
segments(xbar[1], 0, xbar[1], xbar[2], lty = 2, lwd = 2)
th2 = c(0, pi/2, pi, 3*pi/2, 2*pi)
v2 = cbind(r1*cos(th2), r1*sin(th2))
pts2 = t(xbar - (e1%*%t(v2)))
segments(pts2[3, 1], pts2[3, 2], pts2[1, 1], pts2[1, 2], lty = 4, lwd = 2)
segments(pts2[2, 1], pts2[2, 2], pts2[4, 1], pts2[4, 2], lty = 4, lwd = 2)
View(related_data)
plot(pts, type = "l", col = "red", lwd = 3,
main = "Confidence Region for Bivariate Normal",
xlab = "Heading Date", ylab = "Plant Height", asp = 1)
grid(lty = 1, equilogs = FALSE)
segments(-0.2, xbar[2], xbar[1], xbar[2], lty = 2, lwd = 2)
segments(xbar[1], 0, xbar[1], xbar[2], lty = 2, lwd = 2)
th2 = c(0, pi/2, pi, 3*pi/2, 2*pi)
v2 = cbind(r1*cos(th2), r1*sin(th2))
pts2 = t(xbar - (e1%*%t(v2)))
segments(pts2[3, 1], pts2[3, 2], pts2[1, 1], pts2[1, 2], lty = 4, lwd = 2)
segments(pts2[2, 1], pts2[2, 2], pts2[4, 1], pts2[4, 2], lty = 4, lwd = 2)
xdata <- data.frame(PH = related_data$PH,
HD = related_data$HD)
alpha <- 0.95
if (ncol(xdata) != 2) stop("Only for bivariate normal")
n = nrow(xdata); xbar = colMeans(xdata)
S = cov(xdata); es = eigen(S)
e1 = es$vec %*% diag(sqrt(es$val))
r1 = sqrt(qf(alpha, 2, n-2)*sqrt(2*(n-1)/(n*(n-2))))
theta = seq(0, 2*pi, len = 1000)
v1 = cbind(r1*cos(theta), r1*sin(theta))
pts = t(xbar - (e1%*%t(v1)))
plot(pts, type = "l", col = "red", lwd = 3,
main = "Confidence Region for Bivariate Normal",
xlab = "Heading Date", ylab = "Plant Height", asp = 1)
grid(lty = 1, equilogs = FALSE)
segments(-0.2, xbar[2], xbar[1], xbar[2], lty = 2, lwd = 2)
segments(xbar[1], 0, xbar[1], xbar[2], lty = 2, lwd = 2)
th2 = c(0, pi/2, pi, 3*pi/2, 2*pi)
v2 = cbind(r1*cos(th2), r1*sin(th2))
pts2 = t(xbar - (e1%*%t(v2)))
segments(pts2[3, 1], pts2[3, 2], pts2[1, 1], pts2[1, 2], lty = 4, lwd = 2)
segments(pts2[2, 1], pts2[2, 2], pts2[4, 1], pts2[4, 2], lty = 4, lwd = 2)
xdata <- data.frame(PH = related_data$PH,
HD = related_data$HD)
alpha <- 0.95
if (ncol(xdata) != 2) stop("Only for bivariate normal")
n = nrow(xdata); xbar = colMeans(xdata)
S = cov(xdata); es = eigen(S)
e1 = es$vec %*% diag(sqrt(es$val))
r1 = sqrt(qf(alpha, 2, n-2)*sqrt(2*(n-1)/(n*(n-2))))
theta = seq(0, 2*pi, len = 1000)
v1 = cbind(r1*cos(theta), r1*sin(theta))
pts = t(xbar - (e1%*%t(v1)))
plot(pts, type = "l", col = "red", lwd = 3,
main = "Confidence Region for Bivariate Normal",
xlab = "Plant Height", ylab = "Heading Date", asp = 1)
grid(lty = 1, equilogs = FALSE)
segments(-0.2, xbar[2], xbar[1], xbar[2], lty = 2, lwd = 2)
segments(xbar[1], 0, xbar[1], xbar[2], lty = 2, lwd = 2)
th2 = c(0, pi/2, pi, 3*pi/2, 2*pi)
v2 = cbind(r1*cos(th2), r1*sin(th2))
pts2 = t(xbar - (e1%*%t(v2)))
segments(pts2[3, 1], pts2[3, 2], pts2[1, 1], pts2[1, 2], lty = 4, lwd = 2)
segments(pts2[2, 1], pts2[2, 2], pts2[4, 1], pts2[4, 2], lty = 4, lwd = 2)
xdata <- data.frame(PH = related_data$PH,
HD = related_data$HD)
alpha <- 0.8
if (ncol(xdata) != 2) stop("Only for bivariate normal")
n = nrow(xdata); xbar = colMeans(xdata)
S = cov(xdata); es = eigen(S)
e1 = es$vec %*% diag(sqrt(es$val))
r1 = sqrt(qf(alpha, 2, n-2)*sqrt(2*(n-1)/(n*(n-2))))
theta = seq(0, 2*pi, len = 1000)
v1 = cbind(r1*cos(theta), r1*sin(theta))
pts = t(xbar - (e1%*%t(v1)))
plot(pts, type = "l", col = "red", lwd = 3,
main = "Confidence Region for Bivariate Normal",
xlab = "Plant Height", ylab = "Heading Date", asp = 1)
grid(lty = 1, equilogs = FALSE)
segments(-0.2, xbar[2], xbar[1], xbar[2], lty = 2, lwd = 2)
segments(xbar[1], 0, xbar[1], xbar[2], lty = 2, lwd = 2)
th2 = c(0, pi/2, pi, 3*pi/2, 2*pi)
v2 = cbind(r1*cos(th2), r1*sin(th2))
pts2 = t(xbar - (e1%*%t(v2)))
segments(pts2[3, 1], pts2[3, 2], pts2[1, 1], pts2[1, 2], lty = 4, lwd = 2)
segments(pts2[2, 1], pts2[2, 2], pts2[4, 1], pts2[4, 2], lty = 4, lwd = 2)
xdata <- data.frame(PH = related_data$PH,
HD = related_data$HD)
alpha <- 0.9
if (ncol(xdata) != 2) stop("Only for bivariate normal")
n = nrow(xdata); xbar = colMeans(xdata)
S = cov(xdata); es = eigen(S)
e1 = es$vec %*% diag(sqrt(es$val))
r1 = sqrt(qf(alpha, 2, n-2)*sqrt(2*(n-1)/(n*(n-2))))
theta = seq(0, 2*pi, len = 1000)
v1 = cbind(r1*cos(theta), r1*sin(theta))
pts = t(xbar - (e1%*%t(v1)))
plot(pts, type = "l", col = "red", lwd = 3,
main = "Confidence Region for Bivariate Normal",
xlab = "Plant Height", ylab = "Heading Date", asp = 1)
grid(lty = 1, equilogs = FALSE)
segments(-0.2, xbar[2], xbar[1], xbar[2], lty = 2, lwd = 2)
segments(xbar[1], 0, xbar[1], xbar[2], lty = 2, lwd = 2)
th2 = c(0, pi/2, pi, 3*pi/2, 2*pi)
v2 = cbind(r1*cos(th2), r1*sin(th2))
pts2 = t(xbar - (e1%*%t(v2)))
segments(pts2[3, 1], pts2[3, 2], pts2[1, 1], pts2[1, 2], lty = 4, lwd = 2)
segments(pts2[2, 1], pts2[2, 2], pts2[4, 1], pts2[4, 2], lty = 4, lwd = 2)
xdata <- data.frame(PH = related_data$PH,
HD = related_data$HD)
alpha <- 0.95
if (ncol(xdata) != 2) stop("Only for bivariate normal")
n = nrow(xdata); xbar = colMeans(xdata)
S = cov(xdata); es = eigen(S)
e1 = es$vec %*% diag(sqrt(es$val))
r1 = sqrt(qf(alpha, 2, n-2)*sqrt(2*(n-1)/(n*(n-2))))
theta = seq(0, 2*pi, len = 1000)
v1 = cbind(r1*cos(theta), r1*sin(theta))
pts = t(xbar - (e1%*%t(v1)))
plot(pts, type = "l", col = "red", lwd = 3,
main = "Confidence Region for Bivariate Normal",
xlab = "Plant Height", ylab = "Heading Date", asp = 1)
grid(lty = 1, equilogs = FALSE)
segments(-0.2, xbar[2], xbar[1], xbar[2], lty = 2, lwd = 2)
segments(xbar[1], 0, xbar[1], xbar[2], lty = 2, lwd = 2)
th2 = c(0, pi/2, pi, 3*pi/2, 2*pi)
v2 = cbind(r1*cos(th2), r1*sin(th2))
pts2 = t(xbar - (e1%*%t(v2)))
segments(pts2[3, 1], pts2[3, 2], pts2[1, 1], pts2[1, 2], lty = 4, lwd = 2)
segments(pts2[2, 1], pts2[2, 2], pts2[4, 1], pts2[4, 2], lty = 4, lwd = 2)
xdata <- data.frame(PH = related_data$PH,
HD = related_data$HD)
alpha <- 0.95
pts <- function(xdata, alpha) {
n = nrow(xdata); xbar = colMeans(xdata)
S = cov(xdata); es = eigen(S)
e1 = es$vec %*% diag(sqrt(es$val))
r1 = sqrt(qf(alpha, 2, n-2)*sqrt(2*(n-1)/(n*(n-2))))
theta = seq(0, 2*pi, len = 1000)
v1 = cbind(r1*cos(theta), r1*sin(theta))
pts = t(xbar - (e1%*%t(v1)))
return(pts)
}
if (ncol(xdata) != 2) stop("Only for bivariate normal")
pts = pts(xdata, 0.95)
pts1 = pts(xdata, 0.8)
install.packages("SNPRelate")
install.packages("SNPRelate")
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("SNPRelate")
install.packages("xfun")
??SNPRelate
# 1. plot
par(mfrow=c(2,2), mai=c(0.6, 0.6, 0.4, 0.4), cex=0.7, cex.main=1)
plot(`PH_M_cm-Rep1`, `PH_M_cm-Rep2`, main = "(a) scatter plot")
library(mvtnorm)
# density function
dmvnorm(x, mean, sigma, log = FALSE)
