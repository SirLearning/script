// main config file - VMap4 project

// Global parameter definitions
params {
    // General parameters
    outdir = './vmap4_output'
    threads = 32
    memory = '8G'
    publish_mode = 'copy'

    // Project information
    project_name = 'Vmap4'
    project_version = '1.0.0'

    // Workflow specific parameters
    workflow_type = 'alignment'  // data_processing, alignment, depth_qc, fastcall2, performance

    // Data paths
    data_dir = './data'
    reference_dir = './reference'
    output_base = './results'

    // Software paths
    samtools_path = 'samtools'
    bwa_path = 'bwa'
    bwa_mem2_path = 'bwa-mem2'
    tiger_jar = './TIGER.jar'   // use version of 202504
    workshop_jar = './Workshop.jar' 

    // Quality control parameters
    min_mapping_quality = 20
    min_base_quality = 20

    // Resource limits
    max_memory = '128G'
    max_cpus = 128
    max_time = '48h'
}

// process default configuration
process {
    // Default executor
    executor = 'local'
    
    // Default resource configuration
    cpus = { Math.min(params.threads, params.max_cpus) }
    memory = { params.memory }
    time = '24.h'

    // Error handling strategy
    errorStrategy = 'retry'
    maxRetries = 3

    // General tags
    tag = { task.process }

    // publish configuration
    publishDir = [
        path: { "${params.outdir}/${task.process}" },
        mode: params.publish_mode,
        enabled: true
    ]

    // Container configuration (if using containers)
    container = null

    // Environment module configuration (if using module system)
    module = null

    // Process specific configuration

    // === Data processing related processes ===
    withName: 'download_sra_data' {
        cpus = { Math.min(params.threads, 8) }
        memory = { params.memory }
        time = '12h'
        maxRetries = 5
        publishDir = [
            path: "${params.outdir}/raw_data",
            mode: params.publish_mode,
            pattern: "*.sra"
        ]
    }
    
    withName: 'extract_fastq' {
        cpus = { params.threads }
        memory = { params.memory }
        time = '8h'
        publishDir = [
            path: "${params.outdir}/fastq",
            mode: params.publish_mode,
            pattern: "*.fastq.gz"
        ]
    }
    
    withName: 'run_fastqc' {
        cpus = 4
        memory = '4.GB'
        time = '2h'
        publishDir = [
            path: "${params.outdir}/quality_control",
            mode: params.publish_mode
        ]
    }
    
    // === alignment related processes ===
    withName: 'align_reads' {
        cpus = { params.threads }
        memory = { task.attempt < 3 ? '16.GB' : (task.attempt * 8).toString() + '.GB' } // TODO: optimize memory usage
        time = '24h'
        maxRetries = 3
        publishDir = [
            [path: "${params.outdir}/bam", mode: params.publish_mode, pattern: "*.rmdup.bam*"],
            [path: "${params.outdir}/logs", mode: params.publish_mode, pattern: "*.log"]
        ]
    }
    
    withName: 'generate_alignment_stats' {
        cpus = 4
        memory = '8.GB'
        time = '2h'
        publishDir = [
            path: "${params.outdir}/stats",
            mode: params.publish_mode
        ]
    }
    
    // === Depth calculation related processes ===
    withName: 'index_bam_files' {
        cpus = { Math.min(params.threads, 8) }
        memory = { params.memory }
        time = '4h'
        publishDir = [
            [path: "${params.outdir}/indexed_bams", mode: params.publish_mode, pattern: "*.bai"],
            [path: "${params.outdir}/logs", mode: params.publish_mode, pattern: "*_index.log"]
        ]
    }
    
    withName: 'calculate_depth' {
        cpus = { params.threads }
        memory = { params.memory }
        time = '6h'
        publishDir = [
            [path: "${params.outdir}/depth", mode: params.publish_mode, pattern: "*.{summary.txt,mosdepth.*}"],
            [path: "${params.outdir}/logs", mode: params.publish_mode, pattern: "*_depth.log"]
        ]
    }
    
    withName: 'run_quality_control' {
        cpus = 4
        memory = '4.GB'
        time = '2h'
        publishDir = [
            [path: "${params.outdir}/qc", mode: params.publish_mode, pattern: "*.{flagstat,stats}"],
            [path: "${params.outdir}/logs", mode: params.publish_mode, pattern: "*_qc.log"]
        ]
    }
    
    // === FastCall2 related processes ===
    withName: 'fastcall2_disc' {
        cpus = { params.threads }
        memory = { task.attempt < 3 ? '100.GB' : '150.GB' }
        time = '24h'
        maxRetries = 2
        publishDir = [
            path: "${params.outdir}/disc",
            mode: params.publish_mode,
            pattern: "*.ing"
        ]
    }
    
    withName: 'fastcall2_blib' {
        cpus = { params.threads }
        memory = '100.GB'
        time = '24h'
        publishDir = [
            path: "${params.outdir}/blib",
            mode: params.publish_mode,
            pattern: "*.lib.gz"
        ]
    }
    
    withName: 'fastcall2_scan' {
        cpus = { params.threads }
        memory = '100.GB'
        time = '24h'
        publishDir = [
            path: "${params.outdir}/scan",
            mode: params.publish_mode,
            pattern: "*.{vcf,vcf.gz}"
        ]
    }
    
    // === Performance analysis related processes ===
    withName: 'performance_analysis_.*' {
        cpus = { params.threads }
        memory = '100.GB'
        time = '24h'
        publishDir = [
            path: "${params.outdir}/performance",
            mode: params.publish_mode
        ]
    }
    
    // === Summary and report processes ===
    withName: '.*summary.*|.*report.*' {
        cpus = 4
        memory = '8.GB'
        time = '2h'
        publishDir = [
            path: "${params.outdir}/reports",
            mode: params.publish_mode
        ]
    }
}

// work directory configuration
workDir = './work'

// report configuration
report {
    enabled = true
    file = "${params.outdir}/reports/execution_report.html"
    overwrite = true
}

timeline {
    enabled = true
    file = "${params.outdir}/reports/timeline.html"
    overwrite = true
}

trace {
    enabled = true
    file = "${params.outdir}/reports/trace.txt"
    overwrite = true
}

dag {
    enabled = true
    file = "${params.outdir}/reports/flowchart.html"
    overwrite = true
}

// profiles configuration
profiles {
    // standard configuration (default)
    standard {
        process.executor = 'local'
        docker.enabled = false
        singularity.enabled = false
    }

    // high performance configuration
    high_performance {
        params {
            threads = 40
            memory = '32G'
            max_memory = '256G'
        }
        process {
            cpus = { Math.min(params.threads * 2, params.max_cpus) }
            memory = { (params.memory.replaceAll(/[^\d]/, '').toInteger() * 2).toString() + 'G' }
            time = '48h'
        }
    }

    // fast test configuration
    test {
        params {
            threads = 4
            memory = '4G'
            outdir = './test_output'
        }
        process {
            cpus = 2
            memory = '2.GB'
            time = '1h'
            errorStrategy = 'terminate'
        }
    }

    // SLURM configuration
    slurm {
        process {
            executor = 'slurm'
            queue = 'normal'
            clusterOptions = '--account=your_account --partition=normal'
            module = ['samtools/1.21', 'bwa/0.7.17', 'fastqc/0.11.9']
            beforeScript = 'module load anaconda'
        }
        executor {
            name = 'slurm'
            queueSize = 50
            submitRateLimit = '10 sec'
        }
    }

    // PBS configuration example
    pbs {
        process {
            executor = 'pbs'
            queue = 'workq'
            clusterOptions = '-l walltime=24:00:00'
        }
    }

    // Docker configuration
    docker {
        docker.enabled = true
        docker.userEmulation = true
        process {
            container = 'quay.io/biocontainers/mulled-v2-002f51ea92721407ef440b921fb5940f424be842:43ec6124f9f4f875515f9548733b8b4e5e8265aa-0'
        }
    }

    // Singularity configuration
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        process {
            container = 'https://depot.galaxyproject.org/singularity/mulled-v2-002f51ea92721407ef440b921fb5940f424be842:43ec6124f9f4f875515f9548733b8b4e5e8265aa-0'
        }
    }

    // Debug configuration
    debug {
        process {
            errorStrategy = 'terminate'
            beforeScript = 'echo "DEBUG: Starting process: $task.name with PID: $$"'
            afterScript = 'echo "DEBUG: Completed process: $task.name"'
        }
        trace.enabled = true
        timeline.enabled = true
        report.enabled = true
    }

    // AWS configuration example
    aws {
        aws.region = 'us-east-1'
        aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
        process {
            executor = 'awsbatch'
            queue = 'your-batch-queue'
            container = 'your-docker-image:latest'
        }
    }

    // memory optimization configuration
    memory_optimized {
        process {
            withLabel: 'high_memory' {
                memory = { task.attempt < 3 ? '64.GB' : '128.GB' }
                cpus = { Math.min(params.threads, 16) }
            }
            withLabel: 'low_memory' {
                memory = '4.GB'
                cpus = 2
            }
        }
    }
}

// resource manager configuration
executor {
    name = 'local'
    cpus = params.max_cpus
    memory = params.max_memory
}

// cleanup configuration
cleanup = true

// logging configuration
env {
    NXF_OPTS = '-Xms1g -Xmx4g'
}

// Manifest information
manifest {
    name = 'Vmap4 Data Processing Pipeline'
    description = 'Comprehensive pipeline for wheat genome data processing based on 00seq_data_process.ipynb methods'
    author = 'Vmap4 Team'
    version = '1.0.0'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.04.0'
    homePage = 'https://github.com/your-org/vmap4-pipeline'
}

// cache configuration
conda {
    enabled = true
    cacheDir = './conda-cache'
}

// tower configuration (if use nextflow tower)
// tower {
//     enabled = false
//     endpoint = 'https://tower.nf'
//     accessToken = env.TOWER_ACCESS_TOKEN
// }

// include additional configuration files
// includeConfig 'conf/base.config'
